process TEST1 = {

  // The RandomNumberGeneratorService should work
  // with any kind of source
  source = EmptySource {
    untracked int32 maxEvents = 5
  }

  service = RandomNumberGeneratorService {

    // If the source generates random numbers, then
    // supply a seed for the source.  (EmptySource
    // does not, so we do not really need this here)
    // Internally, supplying a seed causes the service
    // to create one engine for the source.
    untracked uint32 sourceSeed = 181

    // There is an alternate syntax which can be
    // used to specify the seed instead.  You can
    // use either syntax but should not use both.
    // For engines that require more than one seed
    // this form is required.
    // untracked vuint32 sourceSeedVector = { 7, 11 }

    // Optionally, one can specify different types
    // of CLHEP engines.  Currently the only two
    // implemented are HepJamesRandom and RanecuEngine.
    // If you do not specify, you always get HepJamesRandom
    // by default.  This has no effect unless a seed is also
    // specified somewhere else.
    // untracked string sourceEngine = "RanecuEngine"

    // HepJamesRandom requires one seed between 0 and 900000000
    // RanecuEngine requires two seeds between 0 and 2147483647

    // Modules are handled in an analogous way.  The only
    // difference being there can be more than one so there
    // is a parameter set to handle each of the three cases.
    // You need to specify seeds for all modules that request
    // random engines from the service (and only those modules
    // unless you want to waste a little CPU and memory).

    PSet moduleSeeds = {
      untracked uint32 t1 = 81
      untracked uint32 t3 = 83
      untracked uint32 t4 = 84      
    }
    PSet moduleSeedVectors = {
      untracked vuint32 t2 = { 1, 2 }     
    }
    PSet moduleEngines = {
      untracked string t2 = "RanecuEngine"
    }
  }

  module t1 = TestRandomNumberServiceAnalyzer { }
  module t2 = TestRandomNumberServiceAnalyzer { }
  module t3 = TestRandomNumberServiceAnalyzer { }
  module t4 = TestRandomNumberServiceAnalyzer { }

  // If you do not want to save the state of the random engines
  // leave this line out.
  // Including this producer causes the states to be stored
  // in the event.  The label used here must be referenced
  // in a later process to restore the state of the engines.
  module randomEngineStateProducer = RandomEngineStateProducer { }

  path p = {t1 & t2 & t3 & t4 & randomEngineStateProducer }

  module out = PoolOutputModule {
    untracked string fileName = "testRandomService1.root" 
  }

  endpath o = { out }
}
